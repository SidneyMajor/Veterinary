@model IEnumerable<Veterinary.Data.Entities.Appointment>

@{
    ViewData["Title"] = "Index";

}

@{

    List<object> commands = new List<object>();

    commands.Add(new { type = "Confirm", buttonOption = new { content = "", iconCss = "fas fa-clock text-warning", cssClass = "e-flat" } });

}
<div class="card bg-success m-1 pt-5">
    <div class="card-header bg-success">
        <h2 class="mb-0">
            <a class="text-lg-center text-white"><i class="fa fa-calendar-alt text-white"></i> Appointments</a>
        </h2>
    </div>


    <div class="card-body bg-light">
        <div class="accordion" id="accordionAppointment">
            <div class="card bg-info">
                <div class="card-header bg-info" id="headingOne">
                    <h2 class="mb-0">
                        <button class="btn btn-info btn-block text-left text-white" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                            Schedule Appointment.
                        </button>
                    </h2>
                </div>

                <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordionAppointment">
                    <div class="card-body bg-info">

                        <div class="schedule-wrapper">
                            <ejs-schedule id="schedule" height="650px" width="auto" selectedDate="DateTime.Now" endHour="18:00" startHour="08:00" cellClick="cellClick"
                                          eventRendered="onEventRendered" eventClick="eventClick" currentView="WorkWeek" showQuickInfo="false" popupOpen="popupOpen">
                                <e-schedule-timescale interval="30" slotCount="1"></e-schedule-timescale>
                                <e-schedule-eventsettings dataSource="Model">

                                </e-schedule-eventsettings>
                            </ejs-schedule>

                        </div>
                    </div>
                </div>
            </div>

            @if (this.User.Identity.IsAuthenticated && (this.User.IsInRole("Admin") || this.User.IsInRole("Doctor")))
            {
                <div class="card bg-warning">
                    <div class="card-header" id="headingTwo">
                        <h2 class="mb-0">
                            <button class="btn btn-warning btn-block text-left collapsed text-white" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                                Schedule Pending
                            </button>
                        </h2>
                    </div>
                    <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionAppointment">
                        <div class="card-body">

                            <ejs-grid id="GridPending" dataSource="@Model.Where(s=> s.Status=="Pending")" allowPaging="true" toolbar="@(new List<string>() {"Search" })" commandClick="commandClick" queryCellInfo="queryCellInfo">
                                <e-grid-pagesettings pageCount="5"></e-grid-pagesettings>
                                <e-grid-searchsettings ignoreAccent="true"></e-grid-searchsettings>
                                <e-grid-editSettings allowDeleting="false" allowEditing="false" mode="Normal"></e-grid-editSettings>
                                <e-grid-columns>
                                    <e-grid-column field="StartTime" headerText="Start Time" format="yyyy-MM-dd hh:mm" textAlign="Justify" width="100"></e-grid-column>
                                    <e-grid-column field="EndTime" headerText="End Time" width="100" format="yyyy-MM-dd hh:mm" textAlign="Justify"></e-grid-column>
                                    <e-grid-column field="Status" headerText="Status" width="50" textAlign="Justify" template="#statusTemplate"></e-grid-column>
                                    <e-grid-column field="Animal.Name" headerText="Animal" width="50" textAlign="Justify"></e-grid-column>
                                    <e-grid-column field="Specialty.Description" headerText="Specialty" width="50" textAlign="Justify"></e-grid-column>
                                    <e-grid-column field="Doctor.FullName" headerText="Doctor" width="50" textAlign="Justify"></e-grid-column>
                                    <e-grid-column headerText="Manage Records" width="100" commands="commands"></e-grid-column>
                                </e-grid-columns>
                            </ejs-grid>
                        </div>
                    </div>
                </div>


                <div class="card bg-success">
                    <div class="card-header" id="headingThree">
                        <h2 class="mb-0">
                            <button class="btn btn-success btn-block text-left collapsed text-white" type="button" data-toggle="collapse" data-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                                All Schedule
                            </button>
                        </h2>
                    </div>
                    <div id="collapseThree" class="collapse" aria-labelledby="headingThree" data-parent="#accordionAppointment">
                        <div class="card-body">

                            <ejs-grid id="GridAll" dataSource="Model" allowPaging="true" toolbar="@(new List<string>() {"Search" })" queryCellInfo="queryCellInfo">
                                <e-grid-pagesettings pageSize="10"></e-grid-pagesettings>
                                <e-grid-searchsettings ignoreAccent="true"></e-grid-searchsettings>
                                <e-grid-editSettings allowDeleting="false" allowEditing="false" mode="Normal"></e-grid-editSettings>
                                <e-grid-columns>
                                    <e-grid-column field="StartTime" headerText="Start Time" format="yyyy-MM-dd hh:mm" textAlign="Justify" width="100"></e-grid-column>
                                    <e-grid-column field="EndTime" headerText="End Time" width="100" format="yyyy-MM-dd hh:mm" textAlign="Justify"></e-grid-column>
                                    <e-grid-column field="Status" headerText="Status" width="50" textAlign="Justify" template="#statusTemplate"></e-grid-column>
                                    <e-grid-column field="Animal.Name" headerText="Animal" width="50" textAlign="Justify"></e-grid-column>
                                    <e-grid-column field="Specialty.Description" headerText="Specialty" width="50" textAlign="Justify"></e-grid-column>
                                    <e-grid-column field="Doctor.FullName" headerText="Doctor" width="50" textAlign="Justify"></e-grid-column>


                                </e-grid-columns>
                            </ejs-grid>
                        </div>
                    </div>
                </div>
            }


        </div>

    </div>


</div>


<div id="PlaceHolder"></div>

<style>
    .swal2-height {
        font-size: 0.5rem !important;
        height: 10vh;
        background-color: forestgreen;
        color: white !important;
    }
</style>

@section Scripts {

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        function onRenderCell(args) {
            if (args.date.getDay() == 0 || args.date.getDay() == 6) {
                //sets isDisabled to true to disable the date.
                args.isDisabled = true;
            }
        }
    </script>
    <script type="text/javascript">

      function cellClick(event) {
        
        $.ajax({
            type: 'GET',
            url: '@Url.Action("Create", "Appointments")',
            data: { startTime: event.startTime.toISOString(), endTime: event.endTime.toISOString() },
                success: function (res) {
                    var PlaceHolder = $("#PlaceHolder");
                    console.log(res);
                    PlaceHolder.html(res);
                    PlaceHolder.find('myModal').on('shown.bs.modal', function () {
                        $(document).off('focusin.modal')
                    });
                    PlaceHolder.find('.modal .modal-title').html('<i class="fas fa-comment-medical text-info"></i> Add Appointment');
                    PlaceHolder.find('.modal').modal('show');
                }
        })
      }

        function popupOpen(args) {
            args.cancel = true;

        }

        function SpecialtyChange() {

        $("#DoctorID").empty();
        $.ajax({
           type: 'POST',
           url: '@Url.Action("GetDoctors","Appointments")',
           dataType: 'json',
           data: { specialtyId: $("#SpecialtyID").val() },
           success: function (doctors) {
              debugger;
              $("#DoctorID").append('<option value="0">(Select a Veterinary...)</option>');
              $.each(doctors, function (i, doctor) {
                 $("#DoctorID").append('<option value="'
                            + doctor.id + '">'
                            + doctor.fullName + '</option>');
              });
           },
           error: function (ex) {
                swal.fire('Failed to retrieve doctor.' + ex);
           }
        })
        return false;
    }

        function addAppointment() {

            $.ajax({
                type: 'POST',
                url: '@Url.Action("Create", "Appointments")',
                data: $("#form").serialize(),
                success: function (res) {
                    debugger;
                    if (res.isValid ==="success") {
                        $('#myModal').modal('hide');

                        var GridObjPending = document.getElementById("GridPending").ej2_instances[0];
                        var GridObjAll = document.getElementById("GridAll").ej2_instances[0];
                        var schObj = document.getElementById("schedule").ej2_instances[0];

                        schObj.eventSettings.dataSource = JSON.parse(res.appointments);
                        GridObjPending.dataSource = JSON.parse(res.pendingAppointment);
                        GridObjAll.dataSource = JSON.parse(res.appointments);


                        GridObjPending.refresh();
                        GridObjAll.refresh();
                        schObj.dataBind();
                    }
                    else if (res.isValid ==="failed")  {
                        $('#myModal').modal('hide');
                        
                        Swal.fire({
                            position: 'bottom-end',
                            icon: 'warning',
                            title: 'Error',
                            text: res.message,
                            showConfirmButton: false,
                            timer: 2500,
                            timerProgressBar: true,
                            heightAuto: false,
                            height: 100,

                        })           
                    }
                    else {
                        var PlaceHolder = $("#PlaceHolder");
                        //PlaceHolder.html(res);
                        var newBody = $('.modal-body', res);
                        PlaceHolder.find('.modal-body').replaceWith(newBody);
                        //PlaceHolder.find('.modal').modal('show');
                    }
                },
                error: function (ex) {
                    console.log(ex);
                    swal.fire(ex.statusText, 'Failed to create appointment.', "error");
                }


            })
        }

        function editAppointment() {

            $.ajax({
                type: 'POST',
                url: '@Url.Action("Edit", "Appointments")',
                data: $("#form").serialize(),
                dataType:"json",
                success: function (res) {
                    //debugger;
                    if (res.isValid === "success") {

                        $('#myModal').modal('hide');
                        swal.fire("Success", res.message, "success");

                        Swal.fire({
                            position: 'bottom-end',
                            icon: 'success',
                            title: 'Success',
                            text: res.message,
                            showConfirmButton: false,
                            timer: 2500,
                            timerProgressBar: true,
                            heightAuto: false,
                            height: 100,

                        })           

                        var GridObjAll = document.getElementById("GridAll").ej2_instances[0];
                        var schObj = document.getElementById("schedule").ej2_instances[0];

                        schObj.eventSettings.dataSource = JSON.parse(res.appointments);
                        GridObjAll.dataSource = JSON.parse(res.appointments);

                        GridObjAll.refresh();
                        schObj.dataBind();
                    }
                    else if (res.isValid === "failed") {

                        Swal.fire({
                            position: 'bottom-end',
                            icon: 'warning',
                            title: 'Error',
                            text: res.message,
                            showConfirmButton: false,
                            timer: 2500,
                            timerProgressBar: true,
                            heightAuto: false,
                            height: 100,

                        })           
                    }
                    else {
                        var PlaceHolder = $("#PlaceHolder");
                        //PlaceHolder.html(res);
                        var newBody = $('.modal-body', res);
                        PlaceHolder.find('.modal-body').replaceWith(newBody);
                        //PlaceHolder.find('.modal').modal('show');
                    }
                },
                error: function (ex) {
                    console.log(ex);
                    swal.fire(ex.statusText, 'Failed to create appointment.', "error");
                }
            })
        }

        function commandClick(args) {

            Swal.fire({
                title: 'Confirm schedule?',
                showDenyButton: true,
                showCancelButton: true,
                confirmButtonText: 'Confirm',
                denyButtonText: 'Denied',
            }).then((result) => {
                /* Read more about isConfirmed, isDenied */
                var res = "";
                if (result.isConfirmed) {
                    res = "Accepted";
                } else if (result.isDenied) {
                    res = "Canceled";
                }

                if (res!=="") {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("ConfirmSchedule", "Appointments")',
                        data: { id: args.rowData.Id, status: res },
                        success: function (res) {
                            if (res.result ==="Accepted") {
                                Swal.fire('Success!', 'Schedule Confirmed', 'success')
                            }
                            else {
                                Swal.fire('Denied', 'Schedule Denied', 'warning')
                            }

                            var GridObjPending = document.getElementById("GridPending").ej2_instances[0];
                            var GridObjAll = document.getElementById("GridAll").ej2_instances[0];
                            var schObj = document.getElementById("schedule").ej2_instances[0];

                            //Refresh data
                            schObj.eventSettings.dataSource = JSON.parse(res.appointments);
                            GridObjPending.dataSource = JSON.parse(res.pendingAppointment);
                            GridObjAll.dataSource = JSON.parse(res.appointments);

                            schObj.dataBind();
                            GridObjPending.refresh();
                            GridObjAll.refresh();
                        },
                        error: function (ex) {
                            Swal.fire('Failed to confirm schedule.' + ex);
                        }
                    })
                }


            })
        }


        function deleteAppointment() {

            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!',
            }).then((result) => {
                debugger;
                var id = document.getElementById("modelId").value;

                if (result.isConfirmed) {

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("Delete", "Appointments")',
                        data: { id: id },
                        success: function (res) {
                            if (res.result === "success") {
                                Swal.fire({
                                    position: 'bottom-end',
                                    icon: res.isValid,
                                    title: 'Deleted!',
                                    text: 'Your Schedule has been deleted.',
                                    showConfirmButton: false,
                                    timer: 2500,
                                    timerProgressBar: true,
                                    heightAuto: false,                                    
                                    customClass: 'swal2-height',
                                })                               
                                $('#myModal').modal('hide');

                                var GridObjPending = document.getElementById("GridPending").ej2_instances[0];
                                var GridObjAll = document.getElementById("GridAll").ej2_instances[0];
                                var schObj = document.getElementById("schedule").ej2_instances[0];

                                schObj.eventSettings.dataSource = JSON.parse(res.appointments);
                                GridObjPending.dataSource = JSON.parse(res.pendingAppointment);
                                GridObjAll.dataSource = JSON.parse(res.appointments);

                                GridObjPending.refresh();
                                GridObjAll.refresh();
                                schObj.dataBind();
                            }
                            else {
                                Swal.fire('Failed', 'Failed to delete schedule', 'warning')
                            }
                            //window.location.reload();
                        },
                        error: function (ex) {
                            Swal.fire('Failed to delete schedule.' + ex);
                        }
                    })
                }

            })
        }

        function eventClick(args) {

            debugger
            if (args.event.Status !== "Canceled" && args.event.Status !== "Concluded") {
                 $.ajax({
                    type: 'GET',
                    url: '@Url.Action("Edit", "Appointments")',
                    data: { id: args.event.Id},
                    success: function (res) {
                        var PlaceHolder = $("#PlaceHolder");
                        console.log(res);
                        PlaceHolder.html(res);
                        PlaceHolder.find('myModal').on('shown.bs.modal', function () {
                            $(document).off('focusin.modal')
                        });
                        PlaceHolder.find('.modal .modal-title').html('<i class="fas fa-comment-medical text-info"></i> Edit Appointment');
                        PlaceHolder.find('.modal').modal('show');
                    },
                    error: function (res) {
                        console.log(res);
                    }
                 })
            }
            return false;

        }

        function onEventRendered(args) {

            if (args.data.Status === "Accepted") {
                args.element.style["backgroundColor"]="green";
            }
            if (args.data.Status === "Pending") {
                args.element.style["backgroundColor"] = "orange";
            }
            if (args.data.Status === "Canceled") {
                args.element.style["backgroundColor"] = "#e1737d";
                args.element.style["color"] = "white";
            }

            if (args.data.Status === "Concluded") {
                args.element.style["backgroundColor"] ="#54df3b";
            }


            if (args.data.Status === "No-show") {
                args.element.style["backgroundColor"] = "#777b7d";
            }


        }


        function queryCellInfo(args) {

            if (args.column.field === 'Status') {

                if (args.cell.textContent === "Accepted") {
                    args.cell.querySelector(".statustxt").classList.add("e-activecolor");
                    args.cell.querySelector(".statustemp").classList.add("e-activecolor");
                }

                if (args.cell.textContent === "Canceled") {
                    args.cell.querySelector(".statustxt").classList.add("e-inactivecolor");
                    args.cell.querySelector(".statustemp").classList.add("e-inactivecolor");
                }

                if (args.cell.textContent === "Pending") {
                    args.cell.querySelector(".statustxt").classList.add("e-pending");
                    args.cell.querySelector(".statustemp").classList.add("e-pending");
                }


                if (args.cell.textContent === "Concluded") {
                    args.cell.querySelector(".statustxt").classList.add("e-concluded");
                    args.cell.querySelector(".statustemp").classList.add("e-concluded");
                }

                if (args.cell.textContent==="No-show") {
                    args.cell.querySelector(".statustxt").classList.add("e-no-show");
                    args.cell.querySelector(".statustemp").classList.add("e-no-show");
                }
            }

        }

    </script>

    <script type="text/x-jsrender" id="statusTemplate">
        <div id="status" class="statustemp">
            <span class="statustxt">${Status}</span>
        </div>
    </script>


}


